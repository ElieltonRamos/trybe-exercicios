Introdu√ß√£o
O que vamos aprender?
Voc√™ quer tornar seu c√≥digo mais limpo e conciso? Al√©m disso, t√™-lo mais flex√≠vel e tolerante a mudan√ßas? Se sua resposta for sim, chegou o momento de aprender os princ√≠pios do SOLID! üéâ Esses princ√≠pios e boas pr√°ticas ditam como seu c√≥digo deve ser escrito e organizado para otimizar manuten√ß√£o, legibilidade e testabilidade.

Bora l√°?

Voc√™ ser√° capaz de:
Escrever fun√ß√µes e classes que tenham uma √∫nica responsabilidade no escopo da sua aplica√ß√£o.

Escrever classes com fun√ß√µes que est√£o abertas para extens√£o e fechadas para modifica√ß√£o.

Inverter depend√™ncias para dar a quem chama o controle sobre como uma fun√ß√£o faz o que precisa.

Por que isso √© importante?
Voc√™ sabe quando um c√≥digo √© considerado bonito? Para isso, ele precisa ser simples e funcional, ou seja, faz o que precisa e pode-se entender tudo facilmente. Muitas vezes, pode surgir um pensamento tal como: ‚Äúeu nunca conseguiria escrever um c√≥digo assim‚Äù, mas a verdade √© que com as li√ß√µes do SOLID, isso n√£o passar√° mais por sua cabe√ßa!

A necessidade de escrever um c√≥digo de qualidade √© amplamente reconhecida pelo mercado de trabalho e fortalece a imagem da pessoa desenvolvedora diante da comunidade de desenvolvimento de software. O uso do ESLint para verificar o respeito √†s boas pr√°ticas e estilo de escrita de c√≥digo √© um exemplo disso.

Portanto, falar de SOLID significa falar de qualidade de c√≥digo. ‚≠ê

Os princ√≠pios SOLID s√£o vastamente usados em todo o mundo para criar aplica√ß√µes de software f√°ceis de se compreender e manter ao longo do tempo. Apesar desses princ√≠pios serem voltados especificamente √† Programa√ß√£o Orientada a Objetos, alguns deles podem ser aplicados em c√≥digos que seguem outros paradigmas.

Criar e manter um c√≥digo de excel√™ncia durante todo o processo de desenvolvimento de um produto deve ser o principal objetivo de uma pessoa desenvolvedora de software, independente da linguagem ou paradigma usados. Isso √© uma forma de demonstrar que a pessoa preza pela qualidade de seu trabalho no longo prazo.

Ao aplicar um bom padr√£o de design no seu c√≥digo, voc√™:

Facilita a manuten√ß√£o do c√≥digo;

Facilita a escrita de testes;

Melhora a legibilidade e a navega√ß√£o;

Evita trechos de c√≥digo muito complexos ou duplicados.

Escrever c√≥digo complexo pode ser uma tarefa muito mais simples do que escrever c√≥digo simples, pois manter o c√≥digo simples e limpo, requer muita pr√°tica. Entretanto, como Sandy Metz diz: ‚Äú aplica√ß√µes bem-sucedidas evoluem e mudam com o tempo sempre‚Äù. N√£o seguir os bons princ√≠pios de escrita poder√° tornar seu c√≥digo uma bagun√ßa, impossibilitando assim o ‚Äúmexer nele‚Äù sem que alguma coisa pare de funcionar.

A arquitetura SOLID existe para que as partes do seu c√≥digo sejam o m√°ximo poss√≠vel independentes umas das outras, para facilitar sua evolu√ß√£o no futuro.

Em outras palavras: qualidade de c√≥digo √© muito mais do que respeitar o ESLint! Vamos come√ßar a ver isso aqui e agora! üöÄ


