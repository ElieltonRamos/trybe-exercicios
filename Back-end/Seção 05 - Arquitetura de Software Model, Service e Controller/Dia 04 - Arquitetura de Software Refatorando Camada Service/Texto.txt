Vamos continuar aprendendo como melhorar a organiza√ß√£o e divis√£o de responsabilidades em nossas aplica√ß√µes, ainda por meio da refatora√ß√£o de nossa API Trybecar. Novamente iremos abordar a camada service, com foco na divis√£o de responsabilidades, orienta√ß√£o para agrupamento de regras de neg√≥cio e realoca√ß√£o de fun√ß√µes que n√£o fazem parte do arquivo app.js, assim fixando o que v√≠nhamos vendo!

Assim como aprendemos na camada model, aqui continuaremos aprendendo quais responsabilidades est√£o previstas para esta camada, mas agora observando as regras de neg√≥cio e as agrupando na camada service!!! Assim como desenvolver testes de unidade para os servi√ßos da nossa aplica√ß√£o.

Voc√™ ser√° capaz de:
Identificar e interpretar as regras de neg√≥cios de uma aplica√ß√£o;
Compreender as responsabilidades da camada de servi√ßo dentro da arquitetura em camadas;
Estruturar a camada de servi√ßo em sua aplica√ß√£o, por meio de refatora√ß√£o;
Melhorar manutenibilidade e reusabilidade do seu c√≥digo;
Aplicar testes unit√°rios nos servi√ßo da sua aplica√ß√£o.
Por que isso √© importante?
Conforme estamos vendo nesta se√ß√£o, √° medida que um software cresce e sua complexidade aumenta, a organiza√ß√£o do c√≥digo √© fundamental!

Hoje vamos dar in√≠cio a fixa√ß√£o de um assunto que envolve muitas regras de neg√≥cio e regra de neg√≥cio √© quase que metade de um software. Saber identificar, interpretar e principalmente agrupar as regras de neg√≥cio no lugar correto, √© o divisor de √°guas para ter uma boa organiza√ß√£o e reusabilidade de c√≥digo, do caos generalizado! Uma regra de neg√≥cio mau interpretada ou mau escrita, pode tornar o c√≥digo que funciona em algo errado, ent√£o √© muito importante entender e principalmente saber interpretar o que nossas pessoas clientes desejam. Bora l√° üöÄ!?

